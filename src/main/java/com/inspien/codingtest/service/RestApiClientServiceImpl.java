package com.inspien.codingtest.service;

import com.inspien.codingtest.common.service.InspienService;
import com.inspien.codingtest.db.entity.InspienXmlDataInfo;
import com.inspien.codingtest.db.entity.PurchaseOrder;
import com.inspien.codingtest.db.entity.Record;
import com.inspien.codingtest.db.repository.JdbcPurchaseOrderRepository;
import com.inspien.codingtest.request.RestApiClientRequest;
import com.inspien.codingtest.response.RestApiClientResponse;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import retrofit2.Response;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;

import static java.lang.Math.min;

@Service
public class RestApiClientServiceImpl implements RestApiClientService {

    private final InspienService inspienService;
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final JdbcPurchaseOrderRepository jdbcPurchaseOrderRepository;

    @Value("${ftp.connect.info.host}")
    private String host;

    @Value("${ftp.connect.info.port}")
    private int port;

    @Value("${ftp.connect.info.user}")
    private String user;

    @Value("${ftp.connect.info.password}")
    private String password;


    public RestApiClientServiceImpl(InspienService inspienService, JdbcPurchaseOrderRepository jdbcPurchaseOrderRepository) {
        this.inspienService = inspienService;
        this.jdbcPurchaseOrderRepository = jdbcPurchaseOrderRepository;
    }

    //        String xmlData = "";
//        String jsonData = "ew0KCSJyZWNvcmQiOiBbDQoJCXsNCgkJCSJOYW1lcyI6ICJCYXh0ZXIgQ2hhbmcgw5Z6YmV5IiwNCgkJCSJQaG9uZSI6ICIwNzYgMjk1NyAxOTYxIiwNCgkJCSJFbWFpbCI6ICJpZC5lbmltLkN1cmFiaXR1ckBDcmFzZGljdHVtLmNvbSIsDQoJCQkiQmlydGhEYXRlIjogIjE5ODEvMDkvMTQiLA0KCQkJIkNvbXBhbnkiOiAiU2VtIEluc3RpdHV0ZSIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY1NTAxMjYgNzMxMyIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjk3ODQzNi05NzA1IiwNCgkJCSJDb3VudHJ5IjogIktlbnlhIiwNCgkJCSJSZWdpb24iOiAiU291dGggU3VtYXRyYSIsDQoJCQkiQ2l0eSI6ICJQYWxlbWJhbmciLA0KCQkJIlN0cmVldCI6ICI5OTgwIExhY3VzLiBBdmVudWUiLA0KCQkJIlppcENvZGUiOiA4Njg2NywNCgkJCSJDcmVkaXRDYXJkIjogNDUzOTE4NDMzNTMxNiwNCgkJCSJHVUlEIjogIjVERDNFM0JGLUEwMzktQjkwOS0zMjZCLTQ2MDM5NkNENUNGNiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkpvc2VwaCBIb29kIEfDtmxsbmVyIiwNCgkJCSJQaG9uZSI6ICIwODAwIDExMTEiLA0KCQkJIkVtYWlsIjogIkRvbmVjQGxpZ3VsYWVsaXQub3JnIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk2Ni8xMi8xMyIsDQoJCQkiQ29tcGFueSI6ICJRdWFtIExpbWl0ZWQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MTcwNDE5IDQ1NzgiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI2MTkzMDUtNTU5NCIsDQoJCQkiQ291bnRyeSI6ICJOb3J0aGVybiBNYXJpYW5hIElzbGFuZHMiLA0KCQkJIlJlZ2lvbiI6ICJCZXJsaW4iLA0KCQkJIkNpdHkiOiAiQmVybGluIiwNCgkJCSJTdHJlZXQiOiAiNDg1LTQ0MDMgTWFnbmlzIFJkLiIsDQoJCQkiWmlwQ29kZSI6IDYwMDEwLA0KCQkJIkNyZWRpdENhcmQiOiA0MDI0MDA3MTM1MzAwLA0KCQkJIkdVSUQiOiAiMzcwNkY4M0YtMDVBQS1DNUVGLThDREItNTA0OTg1NTczRDE5Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiS2FkZWVtIFN3ZWV0IiwNCgkJCSJQaG9uZSI6ICIwODAwIDExMTEiLA0KCQkJIkVtYWlsIjogImF1Z3VlLmlkQG5pc2lBZW5lYW5lZ2V0LmNvbSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NTEvMTIvMTgiLA0KCQkJIkNvbXBhbnkiOiAiVml0YWUgT2RpbyBDb3Jwb3JhdGlvbiIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY0NjA2MTcgNjA4MSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjQ5NjQ2NC04MDEwIiwNCgkJCSJDb3VudHJ5IjogIkNhcGUgVmVyZGUiLA0KCQkJIlJlZ2lvbiI6ICJTYW1hcmEgT2JsYXN0IiwNCgkJCSJDaXR5IjogIlNhbWFyYSIsDQoJCQkiU3RyZWV0IjogIjQwOTQgTGliZXJvLiBBdi4iLA0KCQkJIlppcENvZGUiOiAxMzM1LA0KCQkJIkNyZWRpdENhcmQiOiAiNDkxNiA5ODcgNDIgOTQzMSIsDQoJCQkiR1VJRCI6ICJDRjc4NDRCNS1CQjJBLTQzQzUtOTI2NS03NzM2NDlDQjRBQUUiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJFYXRvbiBCcmVubmFuIiwNCgkJCSJQaG9uZSI6ICIoMDI3KSAwNDk3IDQwMDQiLA0KCQkJIkVtYWlsIjogImRpY3R1bS5ldUBkb2xvcnNpdC5jb20iLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTkwLzExLzIxIiwNCgkJCSJDb21wYW55IjogIlVybmEgQ29ycC4iLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MjEwNzIwIDc4MDEiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI0OTQwMjMtNTY5MiIsDQoJCQkiQ291bnRyeSI6ICJKYW1haWNhIiwNCgkJCSJSZWdpb24iOiAiU0kiLA0KCQkJIkNpdHkiOiAiQ2hha3dhbCIsDQoJCQkiU3RyZWV0IjogIjYxMC01NzI5IE5vbnVtbXkgQXYuIiwNCgkJCSJaaXBDb2RlIjogMjI1MTMsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ1Mzk1MjA3MDc1NDEsDQoJCQkiR1VJRCI6ICI5ODBDNjUwQS1DNDIyLUZDRTQtMzI3Ni02RDdFNzJFRjU3RDgiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJNZWx2aW4gR3V6bWFuIiwNCgkJCSJQaG9uZSI6ICIwNzYgMDc4MyAxNTk0IiwNCgkJCSJFbWFpbCI6ICJmcmluZ2lsbGFATnVsbGFtdmVsaXQub3JnIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk4MS8wMy8xMCIsDQoJCQkiQ29tcGFueSI6ICJBdCBOaXNpIENvbXBhbnkiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2NTcwMzE5IDIyNjkiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI5OTg1MTQtMjk5MiIsDQoJCQkiQ291bnRyeSI6ICJTdWRhbiIsDQoJCQkiUmVnaW9uIjogIlBvbW9yc2tpZSIsDQoJCQkiQ2l0eSI6ICJUY3pldyIsDQoJCQkiU3RyZWV0IjogIjExNzkgUGVsbGVudGVzcXVlIFJkLiIsDQoJCQkiWmlwQ29kZSI6IDE2OTgsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ5Mjk0ODc1NTU2NTQsDQoJCQkiR1VJRCI6ICI5OUI0QjA5RS0zQzY0LTdCQzQtMTgyNS1GNEM0MjU3MEUxNEMiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJKdXN0aW4gSG9vdmVyIiwNCgkJCSJQaG9uZSI6ICIwNzYgNDQyOSA1MTA3IiwNCgkJCSJFbWFpbCI6ICJRdWlzcXVlQGZyaW5naWxsYS5jby51ayIsDQoJCQkiQmlydGhEYXRlIjogIjE5OTMvMDMvMDMiLA0KCQkJIkNvbXBhbnkiOiAiTmVjIEFzc29jaWF0ZXMiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2ODUwMTA3IDc2NDEiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI2NDQ0NzAtOTc5MSIsDQoJCQkiQ291bnRyeSI6ICJNYWxpIiwNCgkJCSJSZWdpb24iOiAiQnJpdGlzaCBDb2x1bWJpYSIsDQoJCQkiQ2l0eSI6ICJCdXJuYWJ5IiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggODMzLCAxMjE3IE9yY2kgU3QuIiwNCgkJCSJaaXBDb2RlIjogNDc1NCwNCgkJCSJDcmVkaXRDYXJkIjogIjQwMiA0MDA3MSA1OTk0NSA0NzUiLA0KCQkJIkdVSUQiOiAiNjdGNURDMzAtMjBGNC1DNEQ2LTgzOEYtMDJGMkZBQ0M5MTRGIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiVmF1Z2hhbiBSdXRsZWRnZSIsDQoJCQkiUGhvbmUiOiAiMDk3OCA0NTAgNDg0MCIsDQoJCQkiRW1haWwiOiAiYXJjdS5WZXN0aWJ1bHVtLmFudGVAZGlhbWxvcmVtLm5ldCIsDQoJCQkiQmlydGhEYXRlIjogIjE5NDYvMDYvMjIiLA0KCQkJIkNvbXBhbnkiOiAiQWMgTWF0dGlzIFZlbGl0IEluY29ycG9yYXRlZCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTYxNTEwMDkgNzM2MSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjE3NDg5Ni02NzAwIiwNCgkJCSJDb3VudHJ5IjogIkphcGFuIiwNCgkJCSJSZWdpb24iOiAiTG9tYmFyZGlhIiwNCgkJCSJDaXR5IjogIkJvcm5vIiwNCgkJCSJTdHJlZXQiOiAiNDY3LTc0NzEgRHVpIEF2ZSIsDQoJCQkiWmlwQ29kZSI6IDgxNzQsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ0ODUxOTc4MjQ3NDc5NjgsDQoJCQkiR1VJRCI6ICJCRTExMjExNC05RkYyLUEzNkYtNTcwNS0zNzdDQzVGQUZDQ0YiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJFbHZpcyBNYXJzaGFsbCIsDQoJCQkiUGhvbmUiOiAiMDc2IDEyMjkgMjAxMCIsDQoJCQkiRW1haWwiOiAic2VtLk51bGxhQG1hZ25hTmFtbGlndWxhLmNvbSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NzYvMTEvMTIiLA0KCQkJIkNvbXBhbnkiOiAiRGlzIFBhcnR1cmllbnQgRm91bmRhdGlvbiIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTYyNDEyMzAgOTY1NiIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjE0NTc5MS01NjI1IiwNCgkJCSJDb3VudHJ5IjogIlNleWNoZWxsZXMiLA0KCQkJIlJlZ2lvbiI6ICJBdGzDoW50aWNvIiwNCgkJCSJDaXR5IjogIlNvbGVkYWQiLA0KCQkJIlN0cmVldCI6ICIyOTQzIE9ybmFyZSBTdC4iLA0KCQkJIlppcENvZGUiOiA4NzYyLA0KCQkJIkNyZWRpdENhcmQiOiAiNDkxNjI4IDgxMTAxMSAwNDYzIiwNCgkJCSJHVUlEIjogIkU3OUIzRDc4LTI5Q0UtMkQ0My0xNEE5LTM3NjYwMjFDQzY0QiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkpvc2lhaCBDYXN0aWxsbyIsDQoJCQkiUGhvbmUiOiAiMDc2IDczMDEgMjc5MyIsDQoJCQkiRW1haWwiOiAiZWxlaWZlbmQuZWdlc3Rhc0BtaWxhY2luaWFtYXR0aXMuY2EiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTc2LzAyLzE5IiwNCgkJCSJDb21wYW55IjogIlZhcml1cyBFdCBFdWlzbW9kIEluc3RpdHV0ZSIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY1MTAxMjMgMjM1MiIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjk4OTYzOC00NzgyIiwNCgkJCSJDb3VudHJ5IjogIlNhaW50IFZpbmNlbnQgYW5kIFRoZSBHcmVuYWRpbmVzIiwNCgkJCSJSZWdpb24iOiAiUGVubnN5bHZhbmlhIiwNCgkJCSJDaXR5IjogIlBoaWxhZGVscGhpYSIsDQoJCQkiU3RyZWV0IjogIkFwICM2NzEtNzY3MSBNYWxlc3VhZGEgUmQuIiwNCgkJCSJaaXBDb2RlIjogMjEzNjYsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTMyIDU1NSAzNyAwMjAyIiwNCgkJCSJHVUlEIjogIkVBMkNBREJGLTJENzUtN0ZEMC1FRTVGLUQ1MkI5NzI4MTMzOSINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIlVscmljIEhhdGZpZWxkIiwNCgkJCSJQaG9uZSI6ICIwNTYgMzE3MSA5NTgyIiwNCgkJCSJFbWFpbCI6ICJhdWN0b3Iubm9uLmZldWdpYXRAZmFtZXNhY3R1cnBpcy5vcmciLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTczLzA3LzIyIiwNCgkJCSJDb21wYW55IjogIlRlbGx1cyBJbmR1c3RyaWVzIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjQzMDMwMiA0NjM0IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiMzc2OTEzLTk4NzgiLA0KCQkJIkNvdW50cnkiOiAiTW9udHNlcnJhdCIsDQoJCQkiUmVnaW9uIjogIlAiLA0KCQkJIkNpdHkiOiAiQmFycmFuY2EiLA0KCQkJIlN0cmVldCI6ICI4ODE4IFBoYXJldHJhIFJkLiIsDQoJCQkiWmlwQ29kZSI6ICIxNzYwIFNXIiwNCgkJCSJDcmVkaXRDYXJkIjogNDkxNjA5ODQ4MjA5NzY0OCwNCgkJCSJHVUlEIjogIkIwMTE4OEFELTQwQ0UtODVBNi1EMEIwLTkyQUMyMkIzNDRFMiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIk5hc2ltIE5vYmxlIiwNCgkJCSJQaG9uZSI6ICIoMDIwKSA5OTE2IDIwODAiLA0KCQkJIkVtYWlsIjogInZlbC5xdWFtLmRpZ25pc3NpbUB2b2x1dHBhdC5jYSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NjgvMDYvMjgiLA0KCQkJIkNvbXBhbnkiOiAiTGliZXJvIEVzdCBDb25ndWUgSW5kdXN0cmllcyIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY4MDAyMjggNzcxNSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjQxNjk1Ni01MzY1IiwNCgkJCSJDb3VudHJ5IjogIlphbWJpYSIsDQoJCQkiUmVnaW9uIjogIklzdGFuYnVsIiwNCgkJCSJDaXR5IjogIklzdGFuYnVsIiwNCgkJCSJTdHJlZXQiOiAiNTE2NiBEb25lYyBBdi4iLA0KCQkJIlppcENvZGUiOiAiQzBTIDVINCIsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTMgMjczOTEgODAyMzggODI4IiwNCgkJCSJHVUlEIjogIjczNjlBN0Y4LUI0NDgtRERCMy0zNzJFLUE2NDU2MzAyMzhBQSINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkFobWVkIE5vcnJpcyIsDQoJCQkiUGhvbmUiOiAiMDcwIDk2NTggMzEwNiIsDQoJCQkiRW1haWwiOiAidGVsbHVzLmp1c3RvLnNpdEBtYXVyaXNzaXQuY2EiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTU1LzA2LzEzIiwNCgkJCSJDb21wYW55IjogIkFsaXF1YW0gUEMiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MDMwMTIzIDIxMjAiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIzMzI0MTktNzgxNyIsDQoJCQkiQ291bnRyeSI6ICJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlIiwNCgkJCSJSZWdpb24iOiAiQW5kYWx1Y8OtYSIsDQoJCQkiQ2l0eSI6ICJHcmFuYWRhIiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggOTE4LCAyNjY2IEltcGVyZGlldCBBdmVudWUiLA0KCQkJIlppcENvZGUiOiAiNTE0ODktNDIyIiwNCgkJCSJDcmVkaXRDYXJkIjogNDAyNDAwNzE4NDU3MzQwOSwNCgkJCSJHVUlEIjogIjI0QzdGMzhBLTFBMjMtNzc4Ni0yM0JCLTBCMjM2QUU4NTBBMSINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIk5vYmxlIENlcnZhbnRlcyIsDQoJCQkiUGhvbmUiOiAiKDAyMykgMzg1MSAxMzI5IiwNCgkJCSJFbWFpbCI6ICJlZ2VzdGFzLnVybmEuanVzdG9AbmlzaWFvZGlvLm5ldCIsDQoJCQkiQmlydGhEYXRlIjogIjE5NTMvMTIvMDUiLA0KCQkJIkNvbXBhbnkiOiAiUGhhcmV0cmEgUXVpc3F1ZSBBYyBGb3VuZGF0aW9uIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjM5MDYyMiA4NjAwIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiNzAyNTUyLTg5NDkiLA0KCQkJIkNvdW50cnkiOiAiVGFqaWtpc3RhbiIsDQoJCQkiUmVnaW9uIjogIk1QIiwNCgkJCSJDaXR5IjogIlRhcm7Ds3ciLA0KCQkJIlN0cmVldCI6ICJBcCAjNTI2LTM3OTggUHJvaW4gUmQuIiwNCgkJCSJaaXBDb2RlIjogIjcxNDg5LTExMCIsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ5MTYzNDYwNDIxMDE2MjgsDQoJCQkiR1VJRCI6ICIxMUJERTIxMi1CREZCLTQ5RDgtMEQ4MC1DNEREODFFOTVCRTEiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJWYW5jZSBDcmFpZyIsDQoJCQkiUGhvbmUiOiAiKDAxODkwKSA3MDk3MSIsDQoJCQkiRW1haWwiOiAiaW1wZXJkaWV0QEZ1c2NlbWlsb3JlbS5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTk3LzAyLzA4IiwNCgkJCSJDb21wYW55IjogIkF0IExMQyIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY2NjAzMDIgNzY1NCIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjM0MjY2MS0zMTY2IiwNCgkJCSJDb3VudHJ5IjogIkZyZW5jaCBQb2x5bmVzaWEiLA0KCQkJIlJlZ2lvbiI6ICJOZXcgU291dGggV2FsZXMiLA0KCQkJIkNpdHkiOiAiTGl2ZXJwb29sIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzE4MC00NDg3IEZyaW5naWxsYSBSZC4iLA0KCQkJIlppcENvZGUiOiA1MDc2OCwNCgkJCSJDcmVkaXRDYXJkIjogIjQ1MzIgMzc2IDUzIDcyODYiLA0KCQkJIkdVSUQiOiAiNDBERjk4ODgtQUY5Ny0yRDIyLTJEMDAtMDQ0NjhBNkU5QjQ3Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiT3R0byBQcnVpdHQiLA0KCQkJIlBob25lIjogIjA4MDAgMzc0IDc3MDciLA0KCQkJIkVtYWlsIjogIm5lcXVlLk51bGxhbUBhcmN1Vml2YW11c3NpdC5jYSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NTQvMDgvMDYiLA0KCQkJIkNvbXBhbnkiOiAiTnVuYyBFc3QgQXNzb2NpYXRlcyIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTYxNjA3MTYgMDE4OSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjY0NTMwNS00OTcyIiwNCgkJCSJDb3VudHJ5IjogIlZpcmdpbiBJc2xhbmRzLCBVbml0ZWQgU3RhdGVzIiwNCgkJCSJSZWdpb24iOiAiT3YiLA0KCQkJIkNpdHkiOiAiSGVuZ2VsbyIsDQoJCQkiU3RyZWV0IjogIlAuTy4gQm94IDk1NiwgNjIzOSBJbXBlcmRpZXQgQXZlbnVlIiwNCgkJCSJaaXBDb2RlIjogIkxVMUUgNVVYIiwNCgkJCSJDcmVkaXRDYXJkIjogNDQ4NTU0MTY4NjMxNiwNCgkJCSJHVUlEIjogIjg3NUQ3QkI0LUE1QTctQ0I1RS00NTZDLTUzMDI2Q0Y3RTE1QiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkVsdmlzIFNob3J0IiwNCgkJCSJQaG9uZSI6ICIwODAwIDE1MyA2NDg2IiwNCgkJCSJFbWFpbCI6ICJ2b2x1dHBhdC5udW5jLnNpdEBpcHN1bXByaW1pc2luLmVkdSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NzkvMDUvMjciLA0KCQkJIkNvbXBhbnkiOiAiR3JhdmlkYSBOdW5jIFNlZCBMaW1pdGVkIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjE4MDIxNyA5MzgwIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiMTE2MzY5LTY3ODIiLA0KCQkJIkNvdW50cnkiOiAiQXJnZW50aW5hIiwNCgkJCSJSZWdpb24iOiAiTUciLA0KCQkJIkNpdHkiOiAiTGxhbmlkbG9lcyIsDQoJCQkiU3RyZWV0IjogIjMzMi05NTYzIEVuaW0gUmQuIiwNCgkJCSJaaXBDb2RlIjogNjI3NTIsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTU2IDg3MiA0NyA0MjMxIiwNCgkJCSJHVUlEIjogIkI0ODI3MjgxLUJEMEYtRkNCMi1DQjQwLTkzQUIxQTE0NTE1QyINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIlVwdG9uIE5ld3RvbiIsDQoJCQkiUGhvbmUiOiAiMDgwMCA4NzA2ODAiLA0KCQkJIkVtYWlsIjogImxhY2luaWFAcGFydHVyaWVudG1vbnRlc25hc2NldHVyLm5ldCIsDQoJCQkiQmlydGhEYXRlIjogIjE5OTUvMTAvMDciLA0KCQkJIkNvbXBhbnkiOiAiU29jaWlzIExpbWl0ZWQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MzQwMjI4IDcxNzUiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIwNDQwMDMtMjcwNCIsDQoJCQkiQ291bnRyeSI6ICJTbG92ZW5pYSIsDQoJCQkiUmVnaW9uIjogIlNMIiwNCgkJCSJDaXR5IjogIlDDvHR0bGluZ2VuIiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggNjkxLCAxMjY0IENvbnZhbGxpcyBBdmVudWUiLA0KCQkJIlppcENvZGUiOiAzMDEwNiwNCgkJCSJDcmVkaXRDYXJkIjogIjQ1MzIzMiAyNzMyNjA1MTU2IiwNCgkJCSJHVUlEIjogIkQ2NTIyRDA5LTk3QjUtMjc0RC1DNkQyLTNENTk0ODRBNTcyOCINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIlJvb25leSBTdHJvbmciLA0KCQkJIlBob25lIjogIjA1MDAgNDU4NTI5IiwNCgkJCSJFbWFpbCI6ICJub251bW15LnVsdHJpY2llcy5vcm5hcmVAbGliZXJvTW9yYmkuZWR1IiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk3My8xMS8xMyIsDQoJCQkiQ29tcGFueSI6ICJNYWVjZW5hcyBMTEMiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MjUwNTE4IDgwMTciLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIyMTQyNDMtMjE2NiIsDQoJCQkiQ291bnRyeSI6ICJSdXNzaWFuIEZlZGVyYXRpb24iLA0KCQkJIlJlZ2lvbiI6ICJXIiwNCgkJCSJDaXR5IjogIkx1ZHZpa2EiLA0KCQkJIlN0cmVldCI6ICJBcCAjNzM4LTQ3MiBEb25lYyBBdmVudWUiLA0KCQkJIlppcENvZGUiOiAyMjI5LA0KCQkJIkNyZWRpdENhcmQiOiAiNDkxIDY3MDQzIDY5MDA2IDU4MiIsDQoJCQkiR1VJRCI6ICJDMUMxMjNGMC0xOEQ3LTUxM0MtOTQ1QS1BOTg2MTdDQjk2QUYiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJOb2FoIEJyb2NrIiwNCgkJCSJQaG9uZSI6ICIwNTAwIDQ1ODIzMiIsDQoJCQkiRW1haWwiOiAic2VtQGdyYXZpZGFtb2xlc3RpZS5vcmciLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTkzLzEyLzI5IiwNCgkJCSJDb21wYW55IjogIlNlbSBWaXRhZSBBbGlxdWFtIENvcnAuIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjkzMDEwNiA1MzIzIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiODA4NzYwLTgyNjQiLA0KCQkJIkNvdW50cnkiOiAiQmVsYXJ1cyIsDQoJCQkiUmVnaW9uIjogIlN0b2NraG9sbXMgbMOkbiIsDQoJCQkiQ2l0eSI6ICJMaWRpbmdvIiwNCgkJCSJTdHJlZXQiOiAiODkxLTY3NTYgTmVjLCBBdmUiLA0KCQkJIlppcENvZGUiOiA5NTcxODksDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NDEwIDA5MCA1OCA1MzYyIiwNCgkJCSJHVUlEIjogIkE1N0UzQjBELUFDNTItQkI5Ri00MjlGLTJGMTgzMkRFM0NEMyINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkNhbGx1bSBQYWdlIiwNCgkJCSJQaG9uZSI6ICIwNzYyNCA4NjczMDUiLA0KCQkJIkVtYWlsIjogImRvbG9yLnF1YW0uZWxlbWVudHVtQGFudGUubmV0IiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk5Ni8xMi8xMyIsDQoJCQkiQ29tcGFueSI6ICJNZXR1cyBTaXQgQ29ycC4iLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MjcxMDI1IDc1MzIiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIwODQ2ODYtMTgxMyIsDQoJCQkiQ291bnRyeSI6ICJDb3N0YSBSaWNhIiwNCgkJCSJSZWdpb24iOiAiVVQiLA0KCQkJIkNpdHkiOiAiV2VzdCBWYWxsZXkgQ2l0eSIsDQoJCQkiU3RyZWV0IjogIjg3NjcgVnVscHV0YXRlLCBBdmVudWUiLA0KCQkJIlppcENvZGUiOiAyMjI3OSwNCgkJCSJDcmVkaXRDYXJkIjogIjQ5MjkgNjM2NiA1MDEzIDM2MTUiLA0KCQkJIkdVSUQiOiAiNTk4OUEzM0YtOUZFQi01RTA3LUQ5M0UtNjM1OTYxNjhFNkExIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiQmFzaWwgTWVyY2FkbyIsDQoJCQkiUGhvbmUiOiAiMDgwMCAxMTExIiwNCgkJCSJFbWFpbCI6ICJhbGlxdWV0LlBoYXNlbGx1c0BkaWduaXNzaW0uY29tIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk3NS8wNi8wMSIsDQoJCQkiQ29tcGFueSI6ICJOYXNjZXR1ciBSaWRpY3VsdXMgTXVzIExMUCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY5OTA5MTMgMjI1MSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjA5OTkxOC02NzUyIiwNCgkJCSJDb3VudHJ5IjogIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhIiwNCgkJCSJSZWdpb24iOiAiUmFkbm9yc2hpcmUiLA0KCQkJIkNpdHkiOiAiTGxhbmRyaW5kb2QgV2VsbHMiLA0KCQkJIlN0cmVldCI6ICI4Njg1IE5lcXVlIEF2LiIsDQoJCQkiWmlwQ29kZSI6IDc3NjIxNSwNCgkJCSJDcmVkaXRDYXJkIjogNDkxNjMyNTg2NTQwMywNCgkJCSJHVUlEIjogIkFBRjE0NTcxLUYzMzItNzAwNS0wM0ZCLTA4OEM4NjRGQzc5OCINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIlRob21hcyBSb3NhIiwNCgkJCSJQaG9uZSI6ICIwNTUgNzgxNiAwMTE0IiwNCgkJCSJFbWFpbCI6ICJlc3QubWF1cmlzQG1pbGFjaW5pYW1hdHRpcy5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTU5LzA1LzE0IiwNCgkJCSJDb21wYW55IjogIlBvc3VlcmUgQ3ViaWxpYSBDdXJhZTsgUEMiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MjEwMjI2IDg4ODEiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIxNTYxNDMtMTQ2OSIsDQoJCQkiQ291bnRyeSI6ICJNYWxheXNpYSIsDQoJCQkiUmVnaW9uIjogIldpZSIsDQoJCQkiQ2l0eSI6ICJWaWVubmEiLA0KCQkJIlN0cmVldCI6ICI3MzUwIERvbmVjIEF2ZSIsDQoJCQkiWmlwQ29kZSI6ICJLOEcgMUc3IiwNCgkJCSJDcmVkaXRDYXJkIjogIjQ3MTY1MiA2MjU0OTkgMzU2MiIsDQoJCQkiR1VJRCI6ICJGQkU3NjUzOC1BMTNFLTU5MDMtQjE2NS1GNkIyMEQyRDBFQzkiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJBeGVsIFd5bm4iLA0KCQkJIlBob25lIjogIjAzMDkgMDQ2IDMwNTciLA0KCQkJIkVtYWlsIjogImxvcmVtLnZpdGFlQG9ybmFyZWVnZXN0YXMuY29tIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk1MC8xMC8wNSIsDQoJCQkiQ29tcGFueSI6ICJFcmF0IENvcnBvcmF0aW9uIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjc2MTAxNyAzNzEzIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiNDM3MjgzLTI1NDUiLA0KCQkJIkNvdW50cnkiOiAiSmFtYWljYSIsDQoJCQkiUmVnaW9uIjogIlNvdXRoIElzbGFuZCIsDQoJCQkiQ2l0eSI6ICJEdW5lZGluIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzQ0Mi03NjQ2IEV0IFN0cmVldCIsDQoJCQkiWmlwQ29kZSI6IDY5NjE4LA0KCQkJIkNyZWRpdENhcmQiOiAiNDUzMiAwNjEgNTEgNjUyMCIsDQoJCQkiR1VJRCI6ICI2NTJCNzM3My1DRUExLTQ2QjYtRUM0MS03NDNDNTlGNTk5OEQiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJEcmlzY29sbCBNYXlvIiwNCgkJCSJQaG9uZSI6ICIwNTYgMjQxOSA0MTc0IiwNCgkJCSJFbWFpbCI6ICJ2ZWwucGVkZS5ibGFuZGl0QE51bGxhbXV0LmNhIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk3Ni8wNC8yMCIsDQoJCQkiQ29tcGFueSI6ICJBbGlxdWV0IE1hZ25hIENvcnBvcmF0aW9uIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjAzMDEyMyAyMTk1IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiMzg3MDQ5LTQ4ODEiLA0KCQkJIkNvdW50cnkiOiAiTmV3IENhbGVkb25pYSIsDQoJCQkiUmVnaW9uIjogIldQIiwNCgkJCSJDaXR5IjogIlBpxYJhIiwNCgkJCSJTdHJlZXQiOiAiNzU2LTkzOTkgUGhhcmV0cmEuIFN0LiIsDQoJCQkiWmlwQ29kZSI6IDQwNDE3LA0KCQkJIkNyZWRpdENhcmQiOiAiNDAyNCAwMDcxIDI4MzMgNDYxMSIsDQoJCQkiR1VJRCI6ICIyMjFCNDlEMi1BNjYyLUVCQkItMTc5RS00QzY1NDBEMUYwQ0MiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJEZWFjb24gRXZhbnMiLA0KCQkJIlBob25lIjogIjA4MTAgMTI4IDg5NDEiLA0KCQkJIkVtYWlsIjogImRvbG9yQHRlbXBvcmVyYXRuZXF1ZS5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTg4LzA4LzE0IiwNCgkJCSJDb21wYW55IjogIkRvbmVjIEF0IEluY29ycG9yYXRlZCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY2NDA3MDkgNzUzMSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjMwNDkwNS0yNzM1IiwNCgkJCSJDb3VudHJ5IjogIlR1cmttZW5pc3RhbiIsDQoJCQkiUmVnaW9uIjogIlNhbiBKb3PDqSIsDQoJCQkiQ2l0eSI6ICJDYWxsZSBCbGFuY29zIiwNCgkJCSJTdHJlZXQiOiAiMjgzLTg1NjAgVGVsbHVzIEF2LiIsDQoJCQkiWmlwQ29kZSI6IDE4MzcwLA0KCQkJIkNyZWRpdENhcmQiOiAiNDUzOTQ0IDE3NDk5NzI2OTkiLA0KCQkJIkdVSUQiOiAiMDgzQ0Y0RTEtMEU2NS1BRDkwLTM3RDgtODMwODBEMjUzMjY4Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiTWFubml4IFNjaHVsdHoiLA0KCQkJIlBob25lIjogIjA4MDAgMTU1IDIzODQiLA0KCQkJIkVtYWlsIjogImlwc3VtLkN1cmFiaXR1ci5jb25zZXF1YXRAbWFsZXN1YWRhZmFtZXNhYy5jb20iLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTgzLzA1LzMwIiwNCgkJCSJDb21wYW55IjogIkxvYm9ydGlzIEluY29ycG9yYXRlZCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY2MzAzMTkgOTcwNCIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjUxODI1Ni04Mzc3IiwNCgkJCSJDb3VudHJ5IjogIktlbnlhIiwNCgkJCSJSZWdpb24iOiAiTm9ydGggSmVvbGxhIiwNCgkJCSJDaXR5IjogIklrc2FuIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzg2NS02MzMxIEV1IFJkLiIsDQoJCQkiWmlwQ29kZSI6IDg2NTk1NiwNCgkJCSJDcmVkaXRDYXJkIjogIjQ0ODUgMTQ0IDU4IDA0NDUiLA0KCQkJIkdVSUQiOiAiMkM1N0JFNzctODgyRC0zOURCLTQzMzAtNDY4MDFBNEJFNDFDIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiRmVycmlzIEtlbm5lZHkiLA0KCQkJIlBob25lIjogIjA1NiAyMjczIDA5OTciLA0KCQkJIkVtYWlsIjogIm5lYy5lbGVpZmVuZEBsaWJlcm8uY28udWsiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTczLzEwLzE2IiwNCgkJCSJDb21wYW55IjogIlVsbGFtY29ycGVyIExMQyIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY0MzA3MDUgNjQyNiIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjk5Nzg5Ni0xODA0IiwNCgkJCSJDb3VudHJ5IjogIlN3YXppbGFuZCIsDQoJCQkiUmVnaW9uIjogIlV0dGFyIFByYWRlc2giLA0KCQkJIkNpdHkiOiAiVW5uYW8iLA0KCQkJIlN0cmVldCI6ICJQLk8uIEJveCA2MTksIDQxNjQgTnVuYyBTdC4iLA0KCQkJIlppcENvZGUiOiA5MDQ5LA0KCQkJIkNyZWRpdENhcmQiOiAiNDQ4NSA1MDcxIDAzODcgODc5OSIsDQoJCQkiR1VJRCI6ICI2N0FGQTkwMy03NDM2LUMyRTMtRTgyRS1FQjM1RDlGQkZCQUMiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJCYXJjbGF5IFJpbGV5IiwNCgkJCSJQaG9uZSI6ICIwODAwIDMyOCAwNjk4IiwNCgkJCSJFbWFpbCI6ICJzZWQuaGVuZHJlcml0LmFAUHJvaW4uY28udWsiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTYzLzAzLzA1IiwNCgkJCSJDb21wYW55IjogIlZpdGFlIENvcnAuIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjM2MDIwNCA4NjMzIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiOTI3MzYyLTE0NjciLA0KCQkJIkNvdW50cnkiOiAiVWdhbmRhIiwNCgkJCSJSZWdpb24iOiAiQXlkxLFuIiwNCgkJCSJDaXR5IjogIkt1xZ9hZGFzxLEiLA0KCQkJIlN0cmVldCI6ICJQLk8uIEJveCA2MzcsIDMwNDEgUGhhc2VsbHVzIFJvYWQiLA0KCQkJIlppcENvZGUiOiA3NDY3MywNCgkJCSJDcmVkaXRDYXJkIjogNDU1Njk1ODA2MzY5ODc4MCwNCgkJCSJHVUlEIjogIjc3M0Y2NUIyLUE0QjMtNzkzOC1DQTVELTI0M0FEMDE2NjA1QyINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkJlY2sgTWV5ZXJzIiwNCgkJCSJQaG9uZSI6ICIwNzAgNjU4MCAxODA2IiwNCgkJCSJFbWFpbCI6ICJRdWlzcXVlLnRpbmNpZHVudC5wZWRlQExvcmVtLm5ldCIsDQoJCQkiQmlydGhEYXRlIjogIjE5ODcvMDQvMDYiLA0KCQkJIkNvbXBhbnkiOiAiT2RpbyBMaW1pdGVkIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjkxMDIxMyA2OTE5IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiODk3NTgxLTU3NjUiLA0KCQkJIkNvdW50cnkiOiAiQnJ1bmVpIiwNCgkJCSJSZWdpb24iOiAiRGFsYXJuYXMgbMOkbiIsDQoJCQkiQ2l0eSI6ICJCb3Jsw6RuZ2UiLA0KCQkJIlN0cmVldCI6ICI3NTUtMzg2NSBNYXVyaXMgQXZlIiwNCgkJCSJaaXBDb2RlIjogNTg0MzAsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTM5NTggNTMwMTYwIDIxMjYiLA0KCQkJIkdVSUQiOiAiRDcwRTgwQkItQkVFRi1GQTlDLTJDNjUtN0U3NTQ0QUNBQjg3Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiQ29uYW4gQmxldmlucyIsDQoJCQkiUGhvbmUiOiAiMDc2MjQgMjgwNTc4IiwNCgkJCSJFbWFpbCI6ICJwdXJ1cy5hYy50ZWxsdXNAdmVsaXRlZ2V0bGFvcmVldC5vcmciLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTc4LzEyLzAyIiwNCgkJCSJDb21wYW55IjogIklhY3VsaXMgQ29tcGFueSIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY4MTAyMDcgNTU2NCIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjQxNzAyMy0yMDk2IiwNCgkJCSJDb3VudHJ5IjogIk1vcm9jY28iLA0KCQkJIlJlZ2lvbiI6ICJISCIsDQoJCQkiQ2l0eSI6ICJIYW1idXJnIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzUzMS03MjU2IEZlcm1lbnR1bSBSZC4iLA0KCQkJIlppcENvZGUiOiA3MDkzMDMsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ5MjkwOTIxNTA3MjcsDQoJCQkiR1VJRCI6ICIwNjI5MDIxMi02MTk3LTM4NTYtRjQ2NS1DMUZDMEU3QTBFRjAiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJSYWZhZWwgQ3J1eiIsDQoJCQkiUGhvbmUiOiAiMDcwIDQ0MDEgNjU0MSIsDQoJCQkiRW1haWwiOiAiRHVpc0Bub25mZXVnaWF0LmNhIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk1NS8wMy8xNSIsDQoJCQkiQ29tcGFueSI6ICJWZXN0aWJ1bHVtIE5lcXVlIEluY29ycG9yYXRlZCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY5MTA1MTQgMTk0MCIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjQzNDc4Ny05ODc4IiwNCgkJCSJDb3VudHJ5IjogIlRhaXdhbiIsDQoJCQkiUmVnaW9uIjogIkdBIiwNCgkJCSJDaXR5IjogIkF1Z3VzdGEiLA0KCQkJIlN0cmVldCI6ICI0MjQtNjk0OSBNb250ZXMsIFN0cmVldCIsDQoJCQkiWmlwQ29kZSI6IDc4MzU1LA0KCQkJIkNyZWRpdENhcmQiOiA0NTM5NjQ5MTE3NTQ5LA0KCQkJIkdVSUQiOiAiODg3MEM0ODYtMUQxNC05NzlCLUNGRTktMkVFNTEzRTI4NkY4Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiTmlzc2ltIEdvbnphbGVzIiwNCgkJCSJQaG9uZSI6ICIwODAwIDExMTEiLA0KCQkJIkVtYWlsIjogInZpdGFlLm5pYmguRG9uZWNAbmliaC5jby51ayIsDQoJCQkiQmlydGhEYXRlIjogIjE5NjMvMDIvMjAiLA0KCQkJIkNvbXBhbnkiOiAiQSBMdGQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2ODcxMDExIDM5ODkiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI0Mjc3NzYtNDY1MiIsDQoJCQkiQ291bnRyeSI6ICJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlIiwNCgkJCSJSZWdpb24iOiAiREUiLA0KCQkJIkNpdHkiOiAiV2lsbWluZ3RvbiIsDQoJCQkiU3RyZWV0IjogIjIwMSBOZXF1ZS4gU3RyZWV0IiwNCgkJCSJaaXBDb2RlIjogMjE3NywNCgkJCSJDcmVkaXRDYXJkIjogIjQ1MzkgODcxIDg3IDcyMDgiLA0KCQkJIkdVSUQiOiAiQUE2QkM4M0UtQkVCRi0yNzE5LUZGQjgtQzNGRTUwMzA5RTgxIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiUmFuZGFsbCBNY2ZhZGRlbiIsDQoJCQkiUGhvbmUiOiAiMDg1MSA3OTQgNzI4NCIsDQoJCQkiRW1haWwiOiAianVzdG9AcmlkaWN1bHVzLmNhIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk2Ni8wMS8wOCIsDQoJCQkiQ29tcGFueSI6ICJBbWV0IExvcmVtIFNlbXBlciBJbnN0aXR1dGUiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2NjMxMjE0IDIxODIiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIzOTU5MzEtMDQwNCIsDQoJCQkiQ291bnRyeSI6ICJKYXBhbiIsDQoJCQkiUmVnaW9uIjogIldCIiwNCgkJCSJDaXR5IjogIkJpZXJnZXMiLA0KCQkJIlN0cmVldCI6ICIyOTgtMjA1OCBDdXJhYml0dXIgQXZlbnVlIiwNCgkJCSJaaXBDb2RlIjogIlc4IDJSTyIsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0OTI5IDU2NSA1MiA5NTU1IiwNCgkJCSJHVUlEIjogIjdCNjQ2RTdGLTQzODctNjRGQi1FMDVBLTU4QzE4NDcwNUEwNiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkRhdmlkIEdvb2RtYW4iLA0KCQkJIlBob25lIjogIigwMTgzNCkgODY1ODgiLA0KCQkJIkVtYWlsIjogImFtZXRAdXRhbGlxdWFtLmNhIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk1NC8wMi8xOSIsDQoJCQkiQ29tcGFueSI6ICJFbGVpZmVuZCBWaXRhZSBJbmNvcnBvcmF0ZWQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MTkwNzE3IDEwNjgiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI5NTc1MTQtMzQzNCIsDQoJCQkiQ291bnRyeSI6ICJMaWJ5YSIsDQoJCQkiUmVnaW9uIjogIlZsYWFtcy1CcmFiYW50IiwNCgkJCSJDaXR5IjogIldlbW1lbCIsDQoJCQkiU3RyZWV0IjogIjg4Ni01Mzg1IENvbnZhbGxpcyBBdi4iLA0KCQkJIlppcENvZGUiOiAiNjQtMzUxIiwNCgkJCSJDcmVkaXRDYXJkIjogNDkyOTkxMDk3MjE3OSwNCgkJCSJHVUlEIjogIjZEMDQ0M0IwLTA0MDktQ0I1NS03MDYyLURCMzMxNjlFNTY2MyINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkNoYWltIEdyaW1lcyIsDQoJCQkiUGhvbmUiOiAiMDgwMCA5Mzg3NjgiLA0KCQkJIkVtYWlsIjogImVsaXQuc2VkLmNvbnNlcXVhdEBtYWxlc3VhZGF2ZWxjb252YWxsaXMuY2EiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTg0LzEyLzI2IiwNCgkJCSJDb21wYW55IjogIkxvYm9ydGlzIE1hdXJpcyBTdXNwZW5kaXNzZSBJbnN0aXR1dGUiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2ODEwNDIwIDkzNDQiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI4MTg1NjItNDU3NyIsDQoJCQkiQ291bnRyeSI6ICJJbmRpYSIsDQoJCQkiUmVnaW9uIjogIkFCIiwNCgkJCSJDaXR5IjogIktpdHNjb3R5IiwNCgkJCSJTdHJlZXQiOiAiNDIxLTE4NzYgQWMgQXZlbnVlIiwNCgkJCSJaaXBDb2RlIjogIjY3LTYzMyIsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NjAxIDU0NSA2NCA0NzM1IiwNCgkJCSJHVUlEIjogIjczNEQzNUE1LTY1QUQtNTNGRC0wRUEzLUIwNEU3MjdDOTc3OCINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIldheW5lIE1ja2VlIiwNCgkJCSJQaG9uZSI6ICIoMDE4NDAxKSAwNTYxNSIsDQoJCQkiRW1haWwiOiAiYWMubWV0dXMudml0YWVAbmF0b3F1ZXBlbmF0aWJ1c2V0LmNvLnVrIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk5OC8wNi8wMyIsDQoJCQkiQ29tcGFueSI6ICJMdWN0dXMgTExDIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjM4MDgyOCAyMjQyIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiMzc4MzUzLTMyNjIiLA0KCQkJIkNvdW50cnkiOiAiVW5pdGVkIEFyYWIgRW1pcmF0ZXMiLA0KCQkJIlJlZ2lvbiI6ICJBemFkIEthc2htaXIiLA0KCQkJIkNpdHkiOiAiSGF0dGlhbiBCYWxhIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzQ2NS02NTExIEludGVnZXIgQXZlIiwNCgkJCSJaaXBDb2RlIjogIjY4LTUxNCIsDQoJCQkiQ3JlZGl0Q2FyZCI6IDQ5MTY3NzI5NzY1ODYyMDUsDQoJCQkiR1VJRCI6ICI0MjY3REY5MC01RjVELUU3N0MtMTA0MS1FOTJBMDc2MEJDNjEiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJGbGV0Y2hlciBXaGl0ZSIsDQoJCQkiUGhvbmUiOiAiMDgwMCA1MzkgMDk2OCIsDQoJCQkiRW1haWwiOiAidXQub2Rpby52ZWxAcXVpc3RyaXN0aXF1ZS5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTcwLzA3LzA4IiwNCgkJCSJDb21wYW55IjogIlBsYWNlcmF0IE9yY2kgSW5jb3Jwb3JhdGVkIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjkyMDkxMCA0NjEyIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiNzk5MjE0LTM1NzMiLA0KCQkJIkNvdW50cnkiOiAiR3JlbmFkYSIsDQoJCQkiUmVnaW9uIjogIlNPIiwNCgkJCSJDaXR5IjogIldlc3Rvbi1zdXBlci1NYXJlIiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggODcwLCA4OTAzIExvcmVtIFN0LiIsDQoJCQkiWmlwQ29kZSI6IDMwODcsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTMgOTYwNjAgNjgzNDAgMTg3IiwNCgkJCSJHVUlEIjogIjhDMzAxNEVFLTRGMjQtMTkwMi02RDIwLURCOEVGQzZBQzhGQiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIk9yZW4gR2FpbmVzIiwNCgkJCSJQaG9uZSI6ICIwODYwIDUyNSAwNDYxIiwNCgkJCSJFbWFpbCI6ICJldWlzbW9kQGRvbG9ydml0YWVkb2xvci5jYSIsDQoJCQkiQmlydGhEYXRlIjogIjE5ODQvMDkvMDciLA0KCQkJIkNvbXBhbnkiOiAiQ29uZ3VlIExpbWl0ZWQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2NjcwODIwIDMyOTEiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI4MjQwODYtODEyOCIsDQoJCQkiQ291bnRyeSI6ICJNYWxhd2kiLA0KCQkJIlJlZ2lvbiI6ICLEsHptIiwNCgkJCSJDaXR5IjogIsOHZcWfbWUiLA0KCQkJIlN0cmVldCI6ICI0NjAtODEwNyBJbnRlZ2VyIEF2LiIsDQoJCQkiWmlwQ29kZSI6ICI4NjQ3Ny01MzAiLA0KCQkJIkNyZWRpdENhcmQiOiA0MTY0Nzc5NTk3MzI3LA0KCQkJIkdVSUQiOiAiNkQxQkFCMkQtNDlFQS0wQUIxLUY4NzgtRkE2NDI2MDgxQzAwIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiS2VhdG9uIFJvc3MiLA0KCQkJIlBob25lIjogIjA4MDAgNDIzOTExIiwNCgkJCSJFbWFpbCI6ICJhYy5tYXR0aXMuc2VtcGVyQGN1cnN1cy5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTgzLzA5LzIzIiwNCgkJCSJDb21wYW55IjogIkdyYXZpZGEgQWxpcXVhbSBMTFAiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2NDgwMjE2IDA3NjQiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIwNTg0ODUtNDI2OSIsDQoJCQkiQ291bnRyeSI6ICJMYW9zIiwNCgkJCSJSZWdpb24iOiAiT04iLA0KCQkJIkNpdHkiOiAiUmVuZnJldyIsDQoJCQkiU3RyZWV0IjogIjQwMjUgQ29uc2VjdGV0dWVyIEF2ZW51ZSIsDQoJCQkiWmlwQ29kZSI6IDgzNzEyLA0KCQkJIkNyZWRpdENhcmQiOiA0NTU2MTkwOTMxMzI2LA0KCQkJIkdVSUQiOiAiOEU2QzYxQjMtMDA0Qi00OTg3LTlGOUEtNjAyRjQ0NTlGNUZBIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiSGlyYW0gTW9vcmUiLA0KCQkJIlBob25lIjogIigwMTY5NzcpIDAyMjAiLA0KCQkJIkVtYWlsIjogInNlZEBRdWlzcXVlLmVkdSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NTkvMDQvMTIiLA0KCQkJIkNvbXBhbnkiOiAiVGVsbHVzIENvcnAuIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjg3MDkwOSA2MzI4IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiNTg0OTc2LTYyNjUiLA0KCQkJIkNvdW50cnkiOiAiR2VvcmdpYSIsDQoJCQkiUmVnaW9uIjogIlAiLA0KCQkJIkNpdHkiOiAiUHVudGFyZW5hcyIsDQoJCQkiU3RyZWV0IjogIlAuTy4gQm94IDI1MywgMzcwNiBFdCBTdHJlZXQiLA0KCQkJIlppcENvZGUiOiAzNzcwLA0KCQkJIkNyZWRpdENhcmQiOiA0NTMyMjM0Nzc5NzA4LA0KCQkJIkdVSUQiOiAiRjYzQTkxMTEtNDU4Qi0wNjBBLUQ3OEItMDZDMTNBMjg5RkVGIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiS2VubmVkeSBTaGVwcGFyZCIsDQoJCQkiUGhvbmUiOiAiMDgwMCA1MTkgNzI3NiIsDQoJCQkiRW1haWwiOiAidXJuYS5qdXN0by5mYXVjaWJ1c0BpbmNvbnNlcXVhdGVuaW0ub3JnIiwNCgkJCSJCaXJ0aERhdGUiOiAiMjAwMC8wMi8wMyIsDQoJCQkiQ29tcGFueSI6ICJTZW0gQ29tcGFueSIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTYyNDA3MjcgOTM1MSIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjk4NjI3NC0xMTU1IiwNCgkJCSJDb3VudHJ5IjogIkhvbHkgU2VlIChWYXRpY2FuIENpdHkgU3RhdGUpIiwNCgkJCSJSZWdpb24iOiAiUXVlZW5zbGFuZCIsDQoJCQkiQ2l0eSI6ICJCcmlzYmFuZSIsDQoJCQkiU3RyZWV0IjogIjg1ODQgQXJjdS4gQXYuIiwNCgkJCSJaaXBDb2RlIjogNzE5OTY3LA0KCQkJIkNyZWRpdENhcmQiOiAiNDAyNCAwMDcgMTAgMTM4NSIsDQoJCQkiR1VJRCI6ICIzODM1ODY5My1BQUQ4LTE1MTQtMzQ3MC1FNUQ3OTk5NjAwMkYiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJBbGV4YW5kZXIgTWF0dGhld3MiLA0KCQkJIlBob25lIjogIigwMTEyKSA4MzUgNjIyNyIsDQoJCQkiRW1haWwiOiAidHJpc3RpcXVlQGVsaXRlcmF0LmVkdSIsDQoJCQkiQmlydGhEYXRlIjogIjE5OTMvMTIvMTgiLA0KCQkJIkNvbXBhbnkiOiAiT3JuYXJlIEluIENvbXBhbnkiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2NzkwNTAzIDU1NTEiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIxODcwNTMtNzgzMiIsDQoJCQkiQ291bnRyeSI6ICJBdXN0cmlhIiwNCgkJCSJSZWdpb24iOiAiQW5kYWx1Y8OtYSIsDQoJCQkiQ2l0eSI6ICJTZXZpbGxhIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzM5MC05NjM3IFBsYWNlcmF0LCBTdC4iLA0KCQkJIlppcENvZGUiOiA2NTk2MCwNCgkJCSJDcmVkaXRDYXJkIjogNDAyNDAwNzEzMDg1NSwNCgkJCSJHVUlEIjogIjNBNEEyRTY1LTQ3RTctQzI0RS04RjE2LTJFOEEzM0Y0NzUzOSINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIkNhZXNhciBHaWxlcyIsDQoJCQkiUGhvbmUiOiAiMDgwMCAxMTExIiwNCgkJCSJFbWFpbCI6ICJBbGlxdWFtLmFkaXBpc2NpbmdAbnVuY2FjLmVkdSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NDkvMTIvMTAiLA0KCQkJIkNvbXBhbnkiOiAiU2l0IEFtZXQgUmlzdXMgTExDIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjI2MTAwNiA5ODg4IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiNjQ0MTA3LTE2NDEiLA0KCQkJIkNvdW50cnkiOiAiTml1ZSIsDQoJCQkiUmVnaW9uIjogIlZJQyIsDQoJCQkiQ2l0eSI6ICJNaWxkdXJhIiwNCgkJCSJTdHJlZXQiOiAiQXAgIzgxNy0zNzcyIFRlbGx1cy4gQXZlIiwNCgkJCSJaaXBDb2RlIjogNjc0NDA1LA0KCQkJIkNyZWRpdENhcmQiOiAiNDUzMiAxMjEgMDAgNzc2NyIsDQoJCQkiR1VJRCI6ICJBNjQ0NDJFNy02ODI3LUJDMDEtQjEzMy00QzVFMDIxQ0Q4QzQiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJIYW1pbHRvbiBCb290aCIsDQoJCQkiUGhvbmUiOiAiMDgwMCA1ODM2ODciLA0KCQkJIkVtYWlsIjogIk51bmMubGVjdHVzQG11c0RvbmVjLmVkdSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NzAvMTIvMjIiLA0KCQkJIkNvbXBhbnkiOiAiT3JuYXJlIEVnZXN0YXMgTExDIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjg1MDYwMSAyNDc4IiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiODA2MDM4LTMzNTYiLA0KCQkJIkNvdW50cnkiOiAiSGFpdGkiLA0KCQkJIlJlZ2lvbiI6ICJXZXN0IEphdmEiLA0KCQkJIkNpdHkiOiAiQ2ltYWhpIiwNCgkJCSJTdHJlZXQiOiAiNjgzNiBNYWVjZW5hcyBSZC4iLA0KCQkJIlppcENvZGUiOiA0MjgxLA0KCQkJIkNyZWRpdENhcmQiOiA0NDEwNDU5NTk1NjcxLA0KCQkJIkdVSUQiOiAiMzUzQ0JBNTQtNEEyNi05RDI2LTBFMkQtOTBGQkQwRTcyRUE5Ig0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiQ2hhc2UgTXVycmF5IiwNCgkJCSJQaG9uZSI6ICIwMzk5IDEyOSAxNzA4IiwNCgkJCSJFbWFpbCI6ICJjdXJzdXMudmVzdGlidWx1bUB2aXRhZXNvZGFsZXNhdC5jYSIsDQoJCQkiQmlydGhEYXRlIjogIjE5OTYvMDUvMjMiLA0KCQkJIkNvbXBhbnkiOiAiRHVpcyBJbnN0aXR1dGUiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MTEwOTMwIDE2MTIiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICIwODQ5OTItOTcwOCIsDQoJCQkiQ291bnRyeSI6ICJMYW9zIiwNCgkJCSJSZWdpb24iOiAiQU4iLA0KCQkJIkNpdHkiOiAiQXdrYSIsDQoJCQkiU3RyZWV0IjogIjYwNi0xODEzIFBoYXJldHJhIEF2ZW51ZSIsDQoJCQkiWmlwQ29kZSI6IDQ2NjI5LA0KCQkJIkNyZWRpdENhcmQiOiAiNDUzMiA5MDkgNDggODM0NiIsDQoJCQkiR1VJRCI6ICJBMjVEMzM1Mi00RjkzLUM3MTItNzE5MS0zNzNFRjM1NEQzRkUiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJDYXJsb3MgUmljaGFyZHNvbiIsDQoJCQkiUGhvbmUiOiAiKDAxODEpIDIxMiA1NDc1IiwNCgkJCSJFbWFpbCI6ICJuYXRvcXVlLnBlbmF0aWJ1cy5ldEB0b3J0b3JuaWJoc2l0LmNvbSIsDQoJCQkiQmlydGhEYXRlIjogIjE5NDcvMDgvMjkiLA0KCQkJIkNvbXBhbnkiOiAiU2VkIENvcnAuIiwNCgkJCSJQZXJzb25hbE51bWJlciI6ICIxNjAyMDcyMiAyODExIiwNCgkJCSJPcmdhbmlzYXRpb25OdW1iZXIiOiAiOTAzMjY3LTI1NjEiLA0KCQkJIkNvdW50cnkiOiAiQ3VyYcOnYW8iLA0KCQkJIlJlZ2lvbiI6ICJCUiIsDQoJCQkiQ2l0eSI6ICJLYXRpaGFyIiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggNzMwLCA1ODM4IEVyYXQuIFJkLiIsDQoJCQkiWmlwQ29kZSI6IDQ2MTMxLA0KCQkJIkNyZWRpdENhcmQiOiAiNDkyOTc5IDU0MzA2Mzc1NDEiLA0KCQkJIkdVSUQiOiAiMDdDOURBODItM0QwOC0wRkEyLTRENTgtMkFDQUFCNzFEM0NEIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiUnlkZXIgV2lsbGlhbXMiLA0KCQkJIlBob25lIjogIigwMTE2KSA2MjAgMjIwNCIsDQoJCQkiRW1haWwiOiAidHJpc3RpcXVlLmFsaXF1ZXRAaWRlcmF0Lm9yZyIsDQoJCQkiQmlydGhEYXRlIjogIjE5NTYvMDUvMDUiLA0KCQkJIkNvbXBhbnkiOiAiRHVpIEZ1c2NlIEFsaXF1YW0gQ29ycC4iLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2MDAwNDIzIDAzNjMiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI5NzcwODctOTA4OSIsDQoJCQkiQ291bnRyeSI6ICJOZXcgQ2FsZWRvbmlhIiwNCgkJCSJSZWdpb24iOiAiR3llIiwNCgkJCSJDaXR5IjogIkdlb2plIiwNCgkJCSJTdHJlZXQiOiAiUC5PLiBCb3ggOTI0LCA2MjAgTW9sbGlzLiBTdHJlZXQiLA0KCQkJIlppcENvZGUiOiAxNzc5LA0KCQkJIkNyZWRpdENhcmQiOiAiNDU1NiA1MTUgMDAgOTUyNyIsDQoJCQkiR1VJRCI6ICIxOTU0OTdENy02NThFLTBGNzAtQkFDNS05NUQxRkM2Rjg0NjYiDQoJCX0sDQoJCXsNCgkJCSJOYW1lcyI6ICJTY290dCBNY2NsdXJlIiwNCgkJCSJQaG9uZSI6ICIoMDI1KSA1OTAxIDExMDciLA0KCQkJIkVtYWlsIjogImxhY3VzLkNyYXNAbGFvcmVldGxpYmVyb2V0LmNvLnVrIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk1MC8wMS8xNyIsDQoJCQkiQ29tcGFueSI6ICJFc3QgTGltaXRlZCIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY3ODA5MTIgMjY0NiIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjIzODc0OC03MDczIiwNCgkJCSJDb3VudHJ5IjogIkhvbmR1cmFzIiwNCgkJCSJSZWdpb24iOiAiTi5MIiwNCgkJCSJDaXR5IjogIk1vbnRlcnJleSIsDQoJCQkiU3RyZWV0IjogIjYwOSBQdWx2aW5hciBBdmVudWUiLA0KCQkJIlppcENvZGUiOiA1MDQ5NDYsDQoJCQkiQ3JlZGl0Q2FyZCI6ICI0NTMyIDg3NzggNzY1NSAxOTk1IiwNCgkJCSJHVUlEIjogIjcyMjgyQUQyLUFDMDQtOEQ5RC03MUJBLUUzQzg2OEQ0MEMzQiINCgkJfSwNCgkJew0KCQkJIk5hbWVzIjogIlRoYWRkZXVzIERveWxlIiwNCgkJCSJQaG9uZSI6ICIwNzYgMjEyMyA5MTU5IiwNCgkJCSJFbWFpbCI6ICJub25AZGlzLmNhIiwNCgkJCSJCaXJ0aERhdGUiOiAiMTk2My8xMC8xNSIsDQoJCQkiQ29tcGFueSI6ICJUZWxsdXMgQXNzb2NpYXRlcyIsDQoJCQkiUGVyc29uYWxOdW1iZXIiOiAiMTY2MzEwMjIgNzk5MyIsDQoJCQkiT3JnYW5pc2F0aW9uTnVtYmVyIjogIjI5OTQ4My01NjcyIiwNCgkJCSJDb3VudHJ5IjogIlBpdGNhaXJuIElzbGFuZHMiLA0KCQkJIlJlZ2lvbiI6ICLDlnN0ZXJnw7Z0bGFuZHMgbMOkbiIsDQoJCQkiQ2l0eSI6ICJOb3Jya8O2cGluZyIsDQoJCQkiU3RyZWV0IjogIkFwICM3NTktODY3NyBEdWkgU3QuIiwNCgkJCSJaaXBDb2RlIjogODIyOTE3LA0KCQkJIkNyZWRpdENhcmQiOiA0NDg1NDY2NTQ3MTgxNDUyLA0KCQkJIkdVSUQiOiAiMkE5ODU4NjYtODc1Qi03N0ZBLTY1RjQtQzBDNkE5QkNDQzExIg0KCQl9LA0KCQl7DQoJCQkiTmFtZXMiOiAiVmFsZW50aW5lIEZ1bGxlciIsDQoJCQkiUGhvbmUiOiAiKDAxMDE3KSA1OTA4NTciLA0KCQkJIkVtYWlsIjogIm51bmMuaWRAYWF1Y3Rvci5uZXQiLA0KCQkJIkJpcnRoRGF0ZSI6ICIxOTU4LzA3LzMwIiwNCgkJCSJDb21wYW55IjogIlF1YW0gVmVsIFNhcGllbiBMdGQiLA0KCQkJIlBlcnNvbmFsTnVtYmVyIjogIjE2ODgwOTAyIDIxMzMiLA0KCQkJIk9yZ2FuaXNhdGlvbk51bWJlciI6ICI1MTMwODEtMjkzNSIsDQoJCQkiQ291bnRyeSI6ICJLaXJpYmF0aSIsDQoJCQkiUmVnaW9uIjogIkFOIiwNCgkJCSJDaXR5IjogIkh1ZWx2YSIsDQoJCQkiU3RyZWV0IjogIkFwICM5ODMtOTU0NCBFbGVtZW50dW0gUm9hZCIsDQoJCQkiWmlwQ29kZSI6ICJFMUwgNk01IiwNCgkJCSJDcmVkaXRDYXJkIjogNDcxNjM5NTI1MzA0NywNCgkJCSJHVUlEIjogIjhGRTg1NTQzLTNFQzMtMjQ4RC00NjcxLTM1NUNGN0UwQkQ1MCINCgkJfQ0KCV0NCn0";
    @Override
    @Transactional
    public Boolean callInspienApi(RestApiClientRequest request) throws Exception {
        RestApiClientResponse response = this.callRequestToInspienApi(request);
        String xmlData;
        String jsonData;
        if (response.getXmlData() != null) {
            xmlData = response.getXmlData();
//            logger.info("BEFORE:+++ XLM DATA +++" + xmlData);
        } else {
            throw new Exception("XML DATA IS NULL");
        }
        if (response.getJsonData() != null) {
            jsonData = response.getJsonData();
//            logger.info("+++ JSON DATA +++" + jsonData);
        } else {
            throw new Exception("JSON DATA IS NULL");
        }

        // XML_DATA Base64 디코딩 처리
        byte[] decodedXmlDataBytes = Base64.getDecoder().decode(xmlData);
        String xmlDataDecoded = new String(decodedXmlDataBytes, "EUC-KR"); //UTF-8

        InspienXmlDataInfo inspienXmlDataInfo = this.jaxbParsing(xmlDataDecoded);

        List<InspienXmlDataInfo.Header> headers = Arrays.asList(inspienXmlDataInfo.getHeaders());
        List<InspienXmlDataInfo.Detail> details = Arrays.asList(inspienXmlDataInfo.getDetails());
        // DETAILS 맞는 HEADERS 에 매핑해서 Purchases Object 생성
        List<PurchaseOrder> purchaseOrders = this.createPurchaserOrder(headers, details);

        // JdbcTemplate 사용해서 native query로 적성 후 DB에 INSERT 로직
        purchaseOrders.forEach(purchaseOrder -> {
            logger.info("Saving...ORDER_NUM: {}, ITEM_SEQ: {}", purchaseOrder.getOrderNum(), purchaseOrder.getItemSeq());
            jdbcPurchaseOrderRepository.save(purchaseOrder);
        });

        // JSON_DATA Base64 디코딩 처리
        // JSON으로 변환 후 Records로 변환
        List<Record> records = this.jSonDataParsingToRecords(jsonData);
        // Records를 파일에 형식 맞게 정성
        File file = this.writeRecordsToTextFile(records);
        // Ftp Server에 파일을 업로드
        this.uploadFileToFtpServer(file);
        return true;
    }

    @Override
    public Page<PurchaseOrder> getPagePurchases(String sender, Pageable pageable) {
        List<PurchaseOrder> purchaseOrders = jdbcPurchaseOrderRepository.getPurchasesContainSender(sender);
//        List<PurchaseOrder> purchaseOrders = Arrays.asList(new PurchaseOrder() , new PurchaseOrder());
        long start = pageable.getOffset();
        if (start > purchaseOrders.size()) return Page.empty();
        long end = min((start + pageable.getPageSize()), purchaseOrders.size());

        return new PageImpl(
                purchaseOrders.subList((int) start, (int) end)
                , pageable
                , purchaseOrders.size()
        );
    }

    private RestApiClientResponse callRequestToInspienApi(RestApiClientRequest request) throws IOException {
        Response<RestApiClientResponse> response = inspienService.inspienPost(request).execute();
        RestApiClientResponse restResponse = response.body();
        if (restResponse == null) {
            throw new RuntimeException("인스피언 API 호출 시 에러가 났습니다. -> 요청파라메터: " + request.getName() + ", " + request.getEmail() + ", " + request.getPhoneNumber());
        }
        return restResponse;
    }

    private List<Record> jSonDataParsingToRecords(String jsonData) {
        // JSON 데이터 처리
//        logger.info("BEFORE +++JSON DATA+++ " + jsonData);
        byte[] decodedJsonDataBytes = Base64.getDecoder().decode(jsonData);
        String jSonDataDecoded = new String(decodedJsonDataBytes);
//        logger.info("AFTER +++JSON DATA+++ " + jSonDataDecoded);
        return this.jsonStringToRecords(jSonDataDecoded);
    }

    private InspienXmlDataInfo jaxbParsing(String xml) throws JAXBException {
//        logger.info("AFTER +++ XML DATA +++" + xml);
        StringReader reader = new StringReader(xml);
        JAXBContext jaxbContext = JAXBContext.newInstance(InspienXmlDataInfo.class);
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        InspienXmlDataInfo inspienXmlDataInfo = (InspienXmlDataInfo) unmarshaller.unmarshal(reader);
        if (inspienXmlDataInfo != null) {
            return inspienXmlDataInfo;
        } else {
            logger.info("XML 파싱하는 데 null 로 반환함");
            throw new NullPointerException("XML 파싱하는 데 null 로 반환함");
        }
    }

    private List<PurchaseOrder> createPurchaserOrder(List<InspienXmlDataInfo.Header> headers, List<InspienXmlDataInfo.Detail> details) {

        List<PurchaseOrder> purchaseOrders = new ArrayList<>();
        headers.forEach(header -> details.forEach(detail -> {
            if (header.getOrderNum().equals(detail.getOrderNum())) {
                PurchaseOrder purchaseOrder = PurchaseOrder.builder()
                        .orderNum(header.getOrderNum())
                        .itemSeq(detail.getItemSeq())
                        .orderId(header.getOrderId())
                        .orderDate(header.getOrderDate())
                        .orderPrice(header.getOrderPrice())
                        .orderQty(header.getOrderQty())
                        .receiverName(header.getReceiverName())
                        .receiverNo(header.getReceiverNo())
                        .etaDate(header.getEtaDate())
                        .destination(header.getDestination())
                        .desciption(header.getDesciption())
                        .itemName(detail.getItemName())
                        .itemQty(detail.getItemQty())
                        .itemColor(detail.getItemColor())
                        .itemPrice(detail.getItemPrice())
                        .build();
                purchaseOrders.add(purchaseOrder);
//                System.out.println(purchaseOrder.toString());
            }
        }));
        return purchaseOrders;
    }

    private List<Record> jsonStringToRecords(String jSon) {

        // 가장 큰 JSONObject를 가져옵니다.
        JSONObject jObject = new JSONObject(jSon);
        // 배열을 가져옵니다.
        JSONArray jArray = jObject.getJSONArray("record");
        List<Record> records = new ArrayList<>();
        for (int i = 0; i < jArray.length(); i++) {
            JSONObject obj = jArray.getJSONObject(i);

            String name = obj.getString("Names");
            String phone = obj.getString("Phone");
            String email = obj.getString("Email");
            String birthDate = obj.getString("BirthDate");
            String company = obj.getString("Company");
            String personalNumber = obj.getString("PersonalNumber");
            String organisationNumber = obj.getString("OrganisationNumber");
            String country = obj.getString("Country");
            String region = obj.getString("Region");
            String city = obj.getString("City");
            String street = obj.getString("Street");
            String zipCode;
            String creditCard;

            try {
                creditCard = obj.getString("CreditCard");
            } catch (Exception e) {
                creditCard = String.valueOf(obj.getLong("CreditCard"));
            }

            try {
                zipCode = obj.getString("ZipCode");
            } catch (Exception e) {
                zipCode = String.valueOf(obj.getLong("ZipCode"));
            }
            String gUID = obj.getString("GUID");

            Record record = Record.builder()
                    .names(name)
                    .phone(phone)
                    .email(email)
                    .birthDate(birthDate)
                    .company(company)
                    .personalNumber(personalNumber)
                    .organisationNumber(organisationNumber)
                    .country(country)
                    .region(region)
                    .city(city)
                    .street(street)
                    .zipCode(zipCode)
                    .creditCard(creditCard)
                    .gUID(gUID)
                    .build();
//            System.out.print(record.toString());
            records.add(record);
        }
        return records;
    }

    private File writeRecordsToTextFile(List<Record> records) throws Exception {
        String extension = ".txt";
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        String fileName = "INSPIEN_JSON_[팜반키엔]_[" + formatter.format(date) + "]" + extension;
        FileWriter myWriter;
        try {
            myWriter = new FileWriter(fileName);
            StringBuilder stringBuilder = new StringBuilder();
            records.forEach(it -> stringBuilder.append(it.toString()));
            myWriter.write(stringBuilder.toString());
            myWriter.close();

            File file = new File(fileName);
            System.out.println("File Name " + file.getName());
            return file;
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
            throw new Exception("파일 생성하지 못하였습니다.");
        }
    }

    private void uploadFileToFtpServer(File file) throws IOException {
        FTPClient client = new FTPClient();
        InputStream inputStream = null;
        System.out.println("FTP 서버에 접속 준비합니다.");
        client.setControlEncoding("UTF-8");
        try {
            client.connect(host, port);
            int resultCode = client.getReplyCode(); // 접속을 확인함
            System.out.println("응답코드: " + resultCode);
            if (!FTPReply.isPositiveCompletion(resultCode)) {
                logger.error("FTP 접속 실패하였습니다. -> 접속 정뵈: " + "Host: " + host + ", " + "Port: " + port);
                client.disconnect();
                throw new Exception(host + " FTP 서버 연결 실패");
            }
            System.out.println("FTP 서버에 접속 성공하였습니다.");
            client.setSoTimeout(1000 * 5);
            if (!client.login(user, password)) {
                logger.error("FTP 서버에 로그인 실패하였습니다. -> 로그인 정뵈: " + "user: " + user + ", " + "password: " + password);
                return;
            }
            System.out.println("FTP 서버에 로그인 성공하였습니다.");
            client.enterLocalPassiveMode(); // enterLocalActiveMode 때문에 계속 시행 중였음
            inputStream = new FileInputStream(file);
//            client.changeWorkingDirectory("/");
            client.makeDirectory("/");

            client.setFileType(FTP.BINARY_FILE_TYPE); // 파일타입설정 ASCII_FILE_TYPE 테스트 파일 행태만

            if (!client.storeFile(file.getName(), inputStream)) {
                throw new Exception("FTP 서버에 파일 업르드 실패하였습니다.");
            }
            System.out.println("파일 업로드 성공하였습니다.");

            String[] ftpFiles = client.listNames();
            System.out.println(Arrays.toString(ftpFiles));
            for (String ftpFile : ftpFiles) {
                if (ftpFile.contains(file.getName())) {
                    System.out.println("방금 업드로된 파일입니다: " + ftpFile);
                }
            }
            inputStream.close();
            client.logout();
            client.disconnect();

        } catch (Throwable e) {
            e.printStackTrace();
        } finally {
            if (client.isConnected()) client.disconnect();
            if (inputStream != null) inputStream.close();
        }
    }

    private void downloadFileFromFTPServer() {
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(host, port);
            ftpClient.login(user, password);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            InputStream inputStream = ftpClient.retrieveFileStream("/folder/download_file_from_server");
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "Cp1252"));

            while (reader.ready()) {
                System.out.println(reader.readLine()); // Or whatever
            }
            inputStream.close();

        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }


    private void downloadFile(String remotePath, String localPath, FTPClient ftpClient) throws Exception {

        OutputStream output = null;
        try {
            File file = null;
            if (this.checkFileExist(localPath)) {
                file = new File(localPath);
            }
            assert file != null;
            output = new FileOutputStream(file);
            boolean result = ftpClient.retrieveFile(remotePath, output);
            if (!result) {
                throw new Exception("      !");
            }
        } catch (Exception e) {
            throw e;
        } finally {
            if (output != null) {
                output.close();
            }
        }

    }

    private boolean checkFileExist(String filePath) throws Exception {
        File file = new File(filePath);
        if (!file.exists()) {
            throw new Exception("     ,   !");
        }
        return true;
    }

    public Boolean pullFileToFtpServer(String fileName, FTPClient ftpClient, InputStream inputStream) throws IOException {
        File secondLocalFile = new File(fileName);
        String secondRemoteFile = "test/Report.doc";
        inputStream = new FileInputStream(secondLocalFile);

        System.out.println("Start uploading second file");
        OutputStream outputStream = ftpClient.storeFileStream(secondRemoteFile);
        byte[] bytesIn = new byte[5000];
        int read = 0;

        while ((read = inputStream.read(bytesIn)) != -1) {
            outputStream.write(bytesIn, 0, read);
        }
        inputStream.close();
        outputStream.close();

        boolean completed = ftpClient.completePendingCommand();
        if (completed) {
            System.out.println("The second file is uploaded successfully.");
            return true;
        } else {
            return false;
        }
    }
}

